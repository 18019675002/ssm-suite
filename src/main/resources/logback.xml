<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	
	<!-- 上下文名称,默认为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改 -->
	<contextName>ssmsuite</contextName>  
	<!-- <property>用来定义变量值的标签，<property> 有两个属性，
		name和value. 定义变量后，可以使“${}”来使用变量-->
	<property name="rootLevel" value="warn"/>
	
	<!-- <timestamp>用来获取时间戳字符串：
		两个属性 key:标识此<timestamp> 的名字；
		datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循Java.txt.SimpleDateFormat的格式。 -->
	<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/> 
	
	<!-- 控制台输出 --> 
	<!-- <appender>是<configuration>的子节点，是负责写日志的组件。
		 <appender>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名
		  -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder  >
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>  
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">  
            <level>ERROR</level>  
            <onMatch>ACCEPT</onMatch>  
            <onMismatch>DENY</onMismatch>  
        </filter> 
	</appender>
	
	<!-- <loger> 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
		仅有一个name属性，一个可选的level和一个可选的addtivity属性。
		name: 用来指定受此loger约束的某一个包或者具体的某一个类。
		level: 设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
			如果未设置此属性，那么当前loger将会继承上级的级别。
		additivity: 是否向上级loger传递打印信息。默认是true。-->
	<logger name="com.shark.ssm" level="${rootLevel}" additivity="false">
		<appender-ref ref="STDOUT"/> 
	</logger>
	
	<!-- <root>也是<loger>元素，但是它是loger的根（顶级）。只有一个level属性，应为已经被命名为"root". -->
	<root level="${rootLevel}">             
		<appender-ref ref="STDOUT" />   
	</root> 
	
</configuration>